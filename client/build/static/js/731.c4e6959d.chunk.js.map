{"version":3,"file":"static/js/731.c4e6959d.chunk.js","mappings":"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","sources":["common/myAxios.ts","components/Loading.tsx","pages/Detail.tsx","utils/newsStorage.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst myAxios = axios.create({\r\n  baseURL:\r\n    process.env.NODE_ENV === 'production'\r\n      ? 'http://parseserver.us:4001'\r\n      : 'http://localhost:4000',\r\n  timeout: 60000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// const myAxios = axios.create({\r\n//   baseURL: 'https://newsapi.org',\r\n//   timeout: 60000,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'X-Api-Key': 'b55b26bd9f324b13aa6ec9897cf3ba6c'\r\n//   }\r\n// });\r\n\r\nexport default myAxios;\r\n","import * as React from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        justifyContent: 'center'\r\n      }}>\r\n      <CircularProgress />\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useAtom } from 'jotai';\r\nimport moment from 'moment';\r\nimport Alert from '@mui/material/Alert';\r\nimport myAxios from '../common/myAxios';\r\nimport { newsSingleObjectLS } from '../utils/newsStorage';\r\nimport Loading from '../components/Loading';\r\nimport { ArticleType, singleResultValueType } from '../common/types';\r\nimport './Detail.css';\r\n\r\nconst TIMEDIFF: number = 60 * 60 * 24; // time cache\r\n\r\nexport const fetchNews = async (id?: string) => {\r\n  const url = `/news/${id}`;\r\n  const response = await myAxios.get(url);\r\n  return response.data;\r\n};\r\n\r\nconst Detail: React.FC = () => {\r\n  const params = useParams();\r\n  const { id } = params;\r\n  // getting data from jotai\r\n  const [newsResult, setNewsResult] = useAtom(newsSingleObjectLS);\r\n  // local state variable to display the data\r\n  const [news, setNews] = React.useState<singleResultValueType>(null);\r\n  // flag to delay initial fetchihng\r\n  const [flag, setFlag] = React.useState<boolean>(false);\r\n  // loading will show loading icon\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  // error will show if some error occured\r\n  const [error, setError] = React.useState<string | null>(null);\r\n\r\n  // creating state key for saving data in jotai cache\r\n  const stateKey: string = React.useMemo(() => {\r\n    return `detail_${id}`;\r\n  }, [id]);\r\n\r\n  // saving the data in jotai cache\r\n  const handleStateData = React.useCallback(\r\n    (key: string, data: ArticleType) => {\r\n      setNewsResult((prev) => {\r\n        return { ...prev, [key]: data };\r\n      });\r\n    },\r\n    [setNewsResult]\r\n  );\r\n\r\n  // function to get data from server or cache\r\n  const getNews = React.useCallback(\r\n    async (forced?: boolean) => {\r\n      try {\r\n        if (!flag) {\r\n          return;\r\n        }\r\n        setLoading(true);\r\n        setError(null);\r\n        // checking if the data is in cache\r\n        if (newsResult[stateKey] && !forced) {\r\n          const currentDate = new Date().getTime();\r\n          const pastDate = newsResult[stateKey]?.expiryRef;\r\n          // if pastdate is found, that means data is in cache\r\n          if (pastDate) {\r\n            const diff = currentDate - pastDate;\r\n            const diffRound = Math.round(diff / 1000);\r\n            // if expiryRef is crossed time limit then we don't need data from cache, else we need it.\r\n            if (diffRound <= TIMEDIFF) {\r\n              // cache time not expired, return it\r\n              console.log(\r\n                'data from cache: ',\r\n                stateKey,\r\n                ', ',\r\n                newsResult[stateKey]\r\n              );\r\n              setNews(newsResult[stateKey]);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        console.log('fresh data: ', stateKey);\r\n        // no data in cache, fetching new data from server\r\n        const r = await fetchNews(id);\r\n        // saving it in jotai storage\r\n        handleStateData(stateKey, {\r\n          ...r,\r\n          expiryRef: new Date().getTime(),\r\n          stateKey\r\n        });\r\n        setNews(r);\r\n      } catch (err: unknown) {\r\n        if (err instanceof Error) {\r\n          setError(err.message);\r\n        } else if (typeof err === 'string') {\r\n          setError(err);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [id, stateKey, handleStateData, newsResult, flag]\r\n  );\r\n\r\n  // on page load, call the news get all\r\n  React.useEffect(() => {\r\n    getNews();\r\n  }, [getNews]);\r\n\r\n  // initial setting of flag to delay the fetch call from api so that we should have result from cache first\r\n  React.useEffect(() => {\r\n    setFlag(true);\r\n  }, []);\r\n  return (\r\n    <div className=\"detail\">\r\n      <h3>\r\n        <a\r\n          href={news?.url}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          className=\"detail_link\">\r\n          {news?.title}\r\n        </a>\r\n      </h3>\r\n\r\n      {error && (\r\n        <div>\r\n          <Alert severity=\"error\">{error}</Alert>\r\n        </div>\r\n      )}\r\n      {loading && <Loading />}\r\n      {news && (\r\n        <div>\r\n          <div style={{ gap: '16px', marginTop: '20px' }}>\r\n            {news?.urlToImage && (\r\n              <div style={{ maxWidth: '100%', position: 'relative' }}>\r\n                <img\r\n                  src={news?.urlToImage}\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: '100%'\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"detail_content\">\r\n              <div className=\"detail_text\">{news?.description}</div>\r\n              <div className=\"detail_text\">\r\n                <div>\r\n                  <b>Content:</b>\r\n                </div>\r\n                <div>{news?.content}</div>\r\n              </div>\r\n              <div className=\"detail_text\">\r\n                <b>Source:</b> {news?.source}\r\n              </div>\r\n              <div className=\"detail_text\">\r\n                <b>Author:</b> {news?.author}\r\n              </div>\r\n              <div className=\"detail_meta_data\">\r\n                <div>\r\n                  <a href={news?.url} target=\"_blank\" rel=\"noreferrer\">\r\n                    View Details\r\n                  </a>\r\n                </div>\r\n                <div>{moment(news?.publishedAt).fromNow()}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import { atom } from 'jotai';\r\nimport { atomWithStorage } from 'jotai/utils';\r\nimport { resultValueType, singleResultValueType } from '../common/types';\r\n\r\nexport const newsObject = atom<Record<string, resultValueType>>({});\r\n\r\nexport const newsObjectLS = atomWithStorage<Record<string, resultValueType>>(\r\n  'newsObjectLS',\r\n  {}\r\n);\r\n\r\nexport const newsSingleObject = atom<Record<string, singleResultValueType>>({});\r\n\r\nexport const newsSingleObjectLS = atomWithStorage<\r\n  Record<string, singleResultValueType>\r\n>('newsSingleObjectLS', {});\r\n"],"names":["axios","create","baseURL","timeout","headers","Loading","_jsx","Box","sx","display","marginTop","marginBottom","justifyContent","children","CircularProgress","fetchNews","async","url","id","myAxios","get","data","Detail","params","useParams","newsResult","setNewsResult","useAtom","newsSingleObjectLS","news","setNews","React","flag","setFlag","loading","setLoading","error","setError","stateKey","handleStateData","key","prev","getNews","forced","_newsResult$stateKey","currentDate","Date","getTime","pastDate","expiryRef","diff","Math","round","console","log","r","err","Error","message","_jsxs","className","href","target","rel","title","Alert","severity","style","gap","urlToImage","maxWidth","position","src","alt","width","description","content","source","author","moment","publishedAt","fromNow","atom","newsObjectLS","atomWithStorage"],"sourceRoot":""}