{"version":3,"file":"static/js/943.f07838c6.chunk.js","mappings":"uKAMA,MAWA,EAXoBA,IAAqC,IAApC,SAAEC,GAA4BD,EACjD,MAAME,GAAWC,EAAAA,EAAAA,OACX,SAAEC,GAAaF,EAMrB,OAJAG,EAAAA,WAAgB,KACdC,OAAOC,SAAS,EAAG,EAAE,GACpB,CAACH,IAEGH,CAAQ,E,yECNF,SAASO,IACtB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,GAAIX,UACvBQ,EAAAA,EAAAA,KAACI,EAAAA,EAAM,CAACC,SAAS,SAAQb,UACvBc,EAAAA,EAAAA,MAACC,EAAAA,EAAO,CAAAf,SAAA,EACNQ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTC,KAAK,QACLC,KAAK,QACLC,MAAM,UACN,aAAW,cACXT,GAAI,CAAEU,GAAI,GAAIpB,UACdQ,EAAAA,EAAAA,KAACa,EAAAA,EAAQ,OAEXb,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,QAAQ,KACRC,QAAM,EACNC,UAAU,MACVf,GAAI,CAAEC,SAAU,EAAGe,QAAS,CAAEC,GAAI,OAAQC,GAAI,UAAY5B,SAAC,sCAOvE,CCxBA,MAWA,EAX4DD,IAAmB,IAAlB,SAAEC,GAAUD,EACvE,OACES,EAAAA,EAAAA,KAACqB,EAAW,CAAA7B,UACVc,EAAAA,EAAAA,MAAA,OAAAd,SAAA,EACEQ,EAAAA,EAAAA,KAACD,EAAO,KACRC,EAAAA,EAAAA,KAAA,OAAKsB,MAAO,CAAEC,QAAS,IAAK/B,SAAEA,QAEpB,ECXZgC,EAAYC,GAAoBC,IAElC1B,EAAAA,EAAAA,KAAC2B,EAAAA,SAAQ,CAACC,SAAS,aAAYpC,UAC7BQ,EAAAA,EAAAA,KAACyB,EAAS,IAAKC,MAKfG,EAAOL,GAASM,EAAAA,EAAAA,OAAK,IAAM,iEAC3BC,EAASP,GAASM,EAAAA,EAAAA,OAAK,IAAM,wDAEtBE,EAAS,CACpB,CACEC,KAAM,IACNC,SACElC,EAAAA,EAAAA,KAACmC,EAAiB,CAAA3C,UAChBQ,EAAAA,EAAAA,KAACoC,EAAAA,GAAM,MAGX5C,SAAU,CACR,CACE6C,OAAO,EACPH,SAASlC,EAAAA,EAAAA,KAAC6B,EAAI,KAEhB,CACEI,KAAM,cACNC,SAASlC,EAAAA,EAAAA,KAAC+B,EAAM,QC5BxB,MCMMO,EAAQ/C,IAQP,IARQ,WACbgD,EAAU,gBACVC,EAAe,gBACfC,GAKDlD,EACC,MAAMmD,ECRD,SAAqBnD,GAAoD,IAAnD,SAAEoD,EAAQ,gBAAEH,GAAoCjD,EAC3E,GAAiB,YAAboD,EACF,OAAOC,EAAAA,EAAAA,IAAoBZ,GAG7B,MAAMa,EAAiB,CAAgB,OAAfL,QAAe,IAAfA,EAAAA,EAAmB,KAC3C,OAAOM,EAAAA,EAAAA,IAAmBd,EAAQ,CAAEa,eAAgBA,GACtD,CDCiBE,CAAa,CAAEJ,SAAUF,EAAiBD,oBACnDQ,GAAOC,EAAAA,EAAAA,GAAWV,GAGxB,OAFAS,EAAKE,QAAOlD,EAAAA,EAAAA,KAACmD,EAAAA,GAAc,CAACT,OAAQA,KAE7B,IAAMU,gBAAe,IAAMJ,EAAKK,WAAU,EDnB1BC,KACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKjE,IAAkD,IAAjD,OAAEkE,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAStE,EACpEkE,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECgBFQ,E","sources":["utils/ScrollToTop.tsx","routing/MenuBar.tsx","routing/NavigationManager.tsx","routing/routes.tsx","reportWebVitals.ts","bootstrap.tsx","routing/router-factory.ts"],"sourcesContent":["import React, { ReactElement } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\ninterface ScrollToTopProps {\r\n  children: ReactElement;\r\n}\r\nconst ScrollToTop = ({ children }: ScrollToTopProps) => {\r\n  const location = useLocation();\r\n  const { pathname } = location;\r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0); // this is important to know how we are scrolling to top\r\n  }, [pathname]); // pathname is url which is changed.\r\n\r\n  return children;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function MenuBar() {\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            sx={{ mr: 2 }}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}>\r\n            Legislative News Aggregator\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","import { ReactElement } from 'react';\r\nimport ScrollToTop from '../utils/ScrollToTop';\r\nimport MenuBar from './MenuBar';\r\n\r\ninterface NavigationManagerProps {\r\n  children: ReactElement;\r\n}\r\n\r\nconst NavigationManager: React.FC<NavigationManagerProps> = ({ children }) => {\r\n  return (\r\n    <ScrollToTop>\r\n      <div>\r\n        <MenuBar />\r\n        <div style={{ padding: 20 }}>{children}</div>\r\n      </div>\r\n    </ScrollToTop>\r\n  );\r\n};\r\n\r\nexport default NavigationManager;\r\n","import { Suspense, lazy } from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\nimport NavigationManager from './NavigationManager';\r\n\r\nconst Loadable = (Component: any) => (props: JSX.IntrinsicAttributes) => {\r\n  return (\r\n    <Suspense fallback=\"Loading...\">\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst Home = Loadable(lazy(() => import('../pages/Home')));\r\nconst Detail = Loadable(lazy(() => import('../pages/Detail')));\r\n\r\nexport const routes = [\r\n  {\r\n    path: '/',\r\n    element: (\r\n      <NavigationManager>\r\n        <Outlet />\r\n      </NavigationManager>\r\n    ),\r\n    children: [\r\n      {\r\n        index: true,\r\n        element: <Home />\r\n      },\r\n      {\r\n        path: '/detail/:id',\r\n        element: <Detail />\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { RouterProvider } from 'react-router-dom';\r\nimport { createRouter } from './routing/router-factory';\r\nimport { RoutingStrategy } from './routing/types';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\nconst mount = ({\r\n  mountPoint,\r\n  initialPathname,\r\n  routingStrategy\r\n}: {\r\n  mountPoint: HTMLElement;\r\n  initialPathname?: string;\r\n  routingStrategy?: RoutingStrategy;\r\n}) => {\r\n  const router = createRouter({ strategy: routingStrategy, initialPathname });\r\n  const root = createRoot(mountPoint);\r\n  root.render(<RouterProvider router={router} />);\r\n\r\n  return () => queueMicrotask(() => root.unmount());\r\n};\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nexport { mount };\r\n","import { createBrowserRouter, createMemoryRouter } from 'react-router-dom';\r\nimport { routes } from './routes';\r\nimport { RoutingStrategy } from './types';\r\n\r\ninterface CreateRouterProps {\r\n  strategy?: RoutingStrategy;\r\n  initialPathname?: string;\r\n}\r\n\r\nexport function createRouter({ strategy, initialPathname }: CreateRouterProps) {\r\n  if (strategy === 'browser') {\r\n    return createBrowserRouter(routes);\r\n  }\r\n\r\n  const initialEntries = [initialPathname ?? '/'];\r\n  return createMemoryRouter(routes, { initialEntries: initialEntries });\r\n}\r\n"],"names":["_ref","children","location","useLocation","pathname","React","window","scrollTo","MenuBar","_jsx","Box","sx","flexGrow","AppBar","position","_jsxs","Toolbar","IconButton","size","edge","color","mr","MenuIcon","Typography","variant","noWrap","component","display","xs","sm","ScrollToTop","style","padding","Loadable","Component","props","Suspense","fallback","Home","lazy","Detail","routes","path","element","NavigationManager","Outlet","index","mount","mountPoint","initialPathname","routingStrategy","router","strategy","createBrowserRouter","initialEntries","createMemoryRouter","createRouter","root","createRoot","render","RouterProvider","queueMicrotask","unmount","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reportWebVitals"],"sourceRoot":""}